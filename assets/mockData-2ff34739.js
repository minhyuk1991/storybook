let e;const i=new Uint8Array(16);function u(){if(!e&&(e=typeof crypto<"u"&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!e))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return e(i)}const o=[];for(let n=0;n<256;++n)o.push((n+256).toString(16).slice(1));function m(n,t=0){return(o[n[t+0]]+o[n[t+1]]+o[n[t+2]]+o[n[t+3]]+"-"+o[n[t+4]]+o[n[t+5]]+"-"+o[n[t+6]]+o[n[t+7]]+"-"+o[n[t+8]]+o[n[t+9]]+"-"+o[n[t+10]]+o[n[t+11]]+o[n[t+12]]+o[n[t+13]]+o[n[t+14]]+o[n[t+15]]).toLowerCase()}const p=typeof crypto<"u"&&crypto.randomUUID&&crypto.randomUUID.bind(crypto),c={randomUUID:p};function h(n,t,d){if(c.randomUUID&&!t&&!n)return c.randomUUID();n=n||{};const a=n.random||(n.rng||u)();if(a[6]=a[6]&15|64,a[8]=a[8]&63|128,t){d=d||0;for(let r=0;r<16;++r)t[d+r]=a[r];return t}return m(a)}const l=n=>{const t=`host-${n}`;return{id:h(),hostName:t,top:Math.floor(Math.random()*100),cpu:Math.floor(Math.random()*100),mem:Math.floor(Math.random()*100),swap:Math.floor(Math.random()*100),disk:Math.floor(Math.random()*100),diskName:`${t}-disk`}},y=n=>new Array(n).fill(0).map((t,d)=>l(d));export{y as c,h as v};
